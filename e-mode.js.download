CodeMirror.defineSimpleMode("eHVL_inner",{start:[{regex:/"(?:[^\\]|\\.)*?"/,token:"string"},{regex:/(?:all|also|as_a|assert|assume|an|and|attribute|bit|bits|bool|break|byte|case|check|change|compute|computed|cover|continue|cross|cycle|default|define|delay|detach|do|down|each|edges|else|emit|empty|event|exec|expect|export|extend|fail|fall|file|first|for|force|from|gen|global|if|ifdef|ifndef|in|index|int|inline|is|instance|item|keep|keeping|key|like|line|list|machine|matching|me|nand|new|nor|not|now|of|on|only|or|out|pass|prev|print|range|ranges|release|repeat|return|reverse|rise|routine|select|soft|start|state|step|string|struct|sync|sys|that|then|time|to|transition|true|try|type|undefined|uint|unit|until|using|var|when|while|with)\b/,token:"keyword"},{regex:/0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,token:"number"},{regex:/--.*/,token:"comment"},{regex:/[-+\/*=<>!]+/,token:"operator"},{regex:/[a-z$][\w$]*/,token:"variable"}],meta:{dontIndentStates:["comment"],lineComment:"--"}});CodeMirror.defineSimpleMode("eHVL",{start:[{regex:/<'/,token:"meta",mode:{spec:"eHVL_inner",end:/'>/}},{regex:/.*/,token:"comment"}],meta:{dontIndentStates:["comment"]}});CodeMirror.defineMIME("text/x-e-hvl",{name:"eHVL"});